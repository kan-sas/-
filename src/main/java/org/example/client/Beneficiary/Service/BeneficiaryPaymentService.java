package org.example.client.Beneficiary.Service;

import okhttp3.ResponseBody;
import org.example.client.Beneficiary.Repository.BeneficiaryPaymentRepository;
import org.example.client.Beneficiary.dto.Request.PaymentRequest;
import org.example.client.Beneficiary.dto.Response.PaymentResponse;
import org.example.client.Beneficiary.exception.BeneficiaryServiceException;
import org.example.client.core.common.dto.ErrorResponse;
import org.example.client.core.common.util.SessionManager;
import org.example.client.core.config.ApiConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import retrofit2.Call;
import retrofit2.Converter;
import retrofit2.Response;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;

public class BeneficiaryPaymentService {
    private static final Logger logger = LoggerFactory.getLogger(BeneficiaryPaymentService.class);
    private final BeneficiaryPaymentRepository beneficiaryPaymentRepository;
    private final Converter<ResponseBody, ErrorResponse> errorConverter;

    public BeneficiaryPaymentService() {
        this.beneficiaryPaymentRepository = ApiConfig.getRetrofit().create(BeneficiaryPaymentRepository.class);
        this.errorConverter = ApiConfig.getErrorConverter();
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–µ—Ä–≤–∏—Å –≤—ã–ø–ª–∞—Ç —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º: {}", beneficiaryPaymentRepository.getClass().getSimpleName());
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏

    public PaymentResponse getPaymentById(Long id) throws BeneficiaryServiceException {
        logger.debug("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã –ø–æ ID: {}", id);
        return executeCall(
                beneficiaryPaymentRepository.getPaymentById(id),
                "–ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã —Å ID: " + id
        );
    }

    public List<PaymentResponse> getAllPaymentsByBeneficiary(Long beneficiaryId) throws BeneficiaryServiceException {
        logger.debug("–ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –≤—ã–ø–ª–∞—Ç –¥–ª—è –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–∞ ID: {}", beneficiaryId);
        return executeCall(
                beneficiaryPaymentRepository.getAllPaymentsByBeneficiary(beneficiaryId),
                "–ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã–ø–ª–∞—Ç –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: " + beneficiaryId
        );
    }

    public List<PaymentResponse> getPendingPayments() throws BeneficiaryServiceException {
        logger.debug("–ó–∞–ø—Ä–æ—Å –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–ª–∞—Ç");
        return executeCall(
                beneficiaryPaymentRepository.getPendingPayments(),
                "–ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–ª–∞—Ç"
        );
    }

    public PaymentResponse createPayment(PaymentRequest request) throws BeneficiaryServiceException {
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤—ã–ø–ª–∞—Ç—ã: {}", request);
        Long userId = SessionManager.getUserId();

        if (userId == null) {
            throw new BeneficiaryServiceException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω");
        }

        validatePaymentRequest(request);

        PaymentRequest enriched = PaymentRequest.builder()
                .beneficiaryId(userId)
                .amount(request.getAmount())
                .type(request.getType())
                .department(request.getDepartment())
                .comment(request.getComment())
                .build();

        PaymentResponse response = executeCall(
                beneficiaryPaymentRepository.createPayment(enriched),
                "—Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã"
        );

        logger.info("–í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: ID {}", response.getId());
        return response;
    }

    public PaymentResponse updatePayment(Long id, PaymentRequest request) throws BeneficiaryServiceException {
        logger.debug("üîº PUT /payments/{}: {}", id, request);
        validateUpdateRequest(request);

        try {
            Response<PaymentResponse> response = beneficiaryPaymentRepository
                    .updatePayment(id, request)
                    .execute();

            if (!response.isSuccessful()) {
                logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", response.errorBody().string());
            }
            return handleResponse(response, "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã");
        } catch (IOException e) {
            logger.error("–°–µ—Ç–µ–≤–æ–π —Å–±–æ–π: {}", e.getMessage());
            throw new BeneficiaryServiceException("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
        }
    }

    public void deletePayment(Long id) throws BeneficiaryServiceException {
        logger.warn("–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã ID: {}", id);
        executeVoidCall(
                beneficiaryPaymentRepository.deletePayment(id),
                "—É–¥–∞–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã —Å ID: " + id
        );
        logger.info("–í—ã–ø–ª–∞—Ç–∞ ID {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", id);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    private void validatePaymentRequest(PaymentRequest request) throws BeneficiaryServiceException {
        logger.trace("–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É: {}", request);

        if (request.getAmount() == null || !isValidAmount(request.getAmount())) {
            logger.warn("–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: {}", request.getAmount());
            throw new BeneficiaryServiceException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã");
        }

        if (request.getType() == null || request.getType().isBlank()) {
            logger.warn("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø –≤—ã–ø–ª–∞—Ç—ã –≤ –∑–∞–ø—Ä–æ—Å–µ: {}", request);
            throw new BeneficiaryServiceException("–¢–∏–ø –≤—ã–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
        }
    }

    private void validateUpdateRequest(PaymentRequest request) throws BeneficiaryServiceException {
        if (request.allFieldsNull()) {
            throw new BeneficiaryServiceException("–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        }

        if (request.getAmount() != null && !isValidAmount(request.getAmount())) {
            throw new BeneficiaryServiceException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã");
        }
    }

    private boolean isValidAmount(String amount) {
        try {
            BigDecimal value = new BigDecimal(amount);
            boolean isValid = value.compareTo(BigDecimal.ZERO) > 0;
            if (!isValid) {
                logger.warn("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è: {}", amount);
            }
            return isValid;
        } catch (NumberFormatException e) {
            logger.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã: {}", amount, e);
            return false;
        }
    }


    private <T> T executeCall(Call<T> call, String operationName) throws BeneficiaryServiceException {
        try {
            logger.debug("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {} –∑–∞–ø—Ä–æ—Å–∞: {}", operationName, call.request().url());
            Response<T> response = call.execute();
            logger.trace("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è {}: –∫–æ–¥ {}", operationName, response.code());
            return handleResponse(response, operationName);
        } catch (IOException e) {
            String errorMsg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ " + operationName;
            logger.error("{} [URL: {}]", errorMsg, call.request().url(), e);
            throw new BeneficiaryServiceException(errorMsg, e);
        }
    }

    private void executeVoidCall(Call<Void> call, String operationName) throws BeneficiaryServiceException {
        try {
            Response<Void> response = call.execute();
            handleVoidResponse(response, operationName);
        } catch (IOException e) {
            String errorMsg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ " + operationName;
            logger.error(errorMsg, e);
            throw new BeneficiaryServiceException(errorMsg, e);
        }
    }

    private <T> T handleResponse(Response<T> response, String operationName) throws BeneficiaryServiceException {
        if (response.isSuccessful()) {
            logger.debug("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç {}: {}", operationName, response.body());
            return response.body();
        } else {
            ErrorResponse error = parseError(response);
            String errorBody = getErrorBody(response);
            String message = String.format("–û—à–∏–±–∫–∞ %s (%d): %s",
                    operationName,
                    response.code(),
                    error != null ? error.getMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            );
            logger.error("{}\n–¢–µ–ª–æ –æ—à–∏–±–∫–∏: {}", message, errorBody);
            throw new BeneficiaryServiceException(message);
        }
    }

    private void handleVoidResponse(Response<Void> response, String operationName) throws BeneficiaryServiceException {
        if (!response.isSuccessful()) {
            ErrorResponse error = parseError(response);
            String message = String.format("–û—à–∏–±–∫–∞ %s (%d): %s",
                    operationName,
                    response.code(),
                    error != null ? error.getMessage() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            );
            logger.error(message);
            throw new BeneficiaryServiceException(message);
        }
    }
    private String getErrorBody(Response<?> response) {
        try {
            return response.errorBody() != null ? response.errorBody().string() : "empty body";
        } catch (IOException e) {
            logger.warn("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –æ—à–∏–±–∫–∏", e);
            return "unreadable body";
        }
    }

    private ErrorResponse parseError(Response<?> response) {
        try {
            ErrorResponse error = errorConverter.convert(Objects.requireNonNull(response.errorBody()));
            logger.trace("–†–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ –æ—à–∏–±–∫–∞: {}", error);
            return error;
        } catch (IOException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—à–∏–±–∫–∏. –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {}", getErrorBody(response), e);
            return null;
        }
    }
}