package org.example.client.Beneficiary.Controller;

import javafx.fxml.FXML;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import org.example.client.Beneficiary.Service.BeneficiaryPaymentService;
import org.example.client.Beneficiary.dto.PaymentTypeEnum;
import org.example.client.Beneficiary.dto.Request.PaymentRequest;
import org.example.client.Beneficiary.dto.Response.PaymentResponse;
import org.example.client.core.common.util.ShowAlertUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;

public class EditPaymentDialogController {
    @FXML private TextField amountField;
    @FXML private ComboBox<PaymentTypeEnum> typeCombo;
    @FXML private TextField departmentField;
    @FXML private TextArea commentArea;

    private PaymentResponse payment;
    private boolean saved = false;
    private static final Logger logger = LoggerFactory.getLogger(EditPaymentDialogController.class);

    /**
     * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ JavaFX –≤—ã–∑–æ–≤–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ FXML ‚Äî –Ω–∞–ø–æ–ª–Ω—è–µ–º ComboBox
     */
    @FXML
    private void initialize() {
        typeCombo.getItems().setAll(PaymentTypeEnum.values());
    }

    public void setPaymentData(PaymentResponse payment) {
        this.payment = payment;
        amountField.setText(String.format(Locale.US, "%.2f", payment.getAmount()));
        // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, payment.getType() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è enum (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ALLOWANCE")
        try {
            typeCombo.getSelectionModel().select(PaymentTypeEnum.valueOf(payment.getType()));
        } catch (IllegalArgumentException e) {
            // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ enum-name, –ø—Ä–æ–±—É–µ–º –ø–æ displayName
            typeCombo.getSelectionModel()
                    .select(PaymentTypeEnum.fromDisplayName(payment.getType()));
        }
        departmentField.setText(payment.getDepartment());
        commentArea.setText(payment.getComment());
    }

    @FXML
    public void handleSave() {
        System.out.println("[EditPaymentDialog] ‚ñ∂Ô∏è handleSave() called");
        try {
            BigDecimal amount = parseAmount(amountField.getText());
            System.out.println("[EditPaymentDialog] üîÑ Parsed amount: " + amount);

            PaymentTypeEnum selectedType = typeCombo.getValue();
            if (selectedType == null) {
                ShowAlertUtil.showErrorAlert("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–ø–ª–∞—Ç—ã");
                return;
            }

            PaymentRequest request = PaymentRequest.builder()
                    .beneficiaryId(payment.getBeneficiary().getId())
                    .amount(amount.toString())
                    .type(selectedType.name())  // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è enum
                    .department(departmentField.getText())
                    .comment(commentArea.getText())
                    .build();

            System.out.println("[EditPaymentDialog] üîº About to call updatePayment() for ID=" + payment.getId());
            new BeneficiaryPaymentService().updatePayment(payment.getId(), request);
            System.out.println("[EditPaymentDialog] ‚úÖ updatePayment() returned");

            saved = true;
        } catch (ParseException e) {
            System.out.println("[EditPaymentDialog] ‚ùå ParseException: " + e.getMessage());
            ShowAlertUtil.showErrorAlert("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã");
        } catch (Exception e) {
            System.out.println("[EditPaymentDialog] ‚ùå Exception in handleSave(): " + e.getMessage());
            e.printStackTrace();
            ShowAlertUtil.showErrorAlert("–û—à–∏–±–∫–∞", e.getMessage());
        }
    }

    private BigDecimal parseAmount(String input) throws ParseException {
        NumberFormat format = NumberFormat.getInstance(new Locale("ru", "RU"));
        return new BigDecimal(format.parse(input).toString());
    }

    public boolean isSaved() {
        return saved;
    }
}
